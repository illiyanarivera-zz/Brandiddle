type userInfo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModeluserInfoConnection {
  items: [userInfo]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModeluserInfoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModeluserInfoFilterInput]
  or: [ModeluserInfoFilterInput]
  not: ModeluserInfoFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUserInfo(id: ID!): userInfo
  listUserInfos(filter: ModeluserInfoFilterInput, limit: Int, nextToken: String): ModeluserInfoConnection
}

input CreateUserInfoInput {
  id: ID
  name: String!
  description: String
}

input UpdateUserInfoInput {
  id: ID!
  name: String
  description: String
}

input DeleteUserInfoInput {
  id: ID
}

type Mutation {
  createUserInfo(input: CreateUserInfoInput!, condition: ModeluserInfoConditionInput): userInfo
  updateUserInfo(input: UpdateUserInfoInput!, condition: ModeluserInfoConditionInput): userInfo
  deleteUserInfo(input: DeleteUserInfoInput!, condition: ModeluserInfoConditionInput): userInfo
}

input ModeluserInfoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModeluserInfoConditionInput]
  or: [ModeluserInfoConditionInput]
  not: ModeluserInfoConditionInput
}

type Subscription {
  onCreateUserInfo(owner: String!): userInfo @aws_subscribe(mutations: ["createUserInfo"])
  onUpdateUserInfo(owner: String!): userInfo @aws_subscribe(mutations: ["updateUserInfo"])
  onDeleteUserInfo(owner: String!): userInfo @aws_subscribe(mutations: ["deleteUserInfo"])
}
